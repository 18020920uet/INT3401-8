`visited` 1 mảng để lưu các node đã qua
`currentNode` node hiện tại đang duyệt
`path` quá trình đi (actions) đến node hiện tại

Q1: DFS
`myStack` để lưu các node trong quá trình duyệt
Duyệt đến khi nào tìm đc goalState hoặc stack rỗng

Q2: DBS
`myQueue` để lưu các node trong quá trình duyệt
Duyệt đến khi nào tìm đc goalState hoặc queue rỗng

Q3: uniformCostSearch
`myPriorityQueue` để lưu các node trong quá trình duyệt
ưu tiên cost bé nhất
`PriorityQueue` pop sẽ ra phần tử được ưu tiên trước ra tiếp
Duyệt đến khi nào tìm đc goalState hoặc PriorityQueue rỗng

Q4: A*search
`myPriorityQueue` để lưu các node trong quá trình duyệt
ưu tiên hàm tổng của cost và nullHeuristic = 0
Duyệt đến khi nào tìm đc goalState hoặc PriorityQueue rỗng

Q5: CornerProblem
- isGoalState
  nếu đi qua 4 Corner thì trả về đúng
- getStartState
  init giá trị đầu tiên bằng giá trị giá của startState - vị trí của pacman
- getSuccessors:
  successors = các phần tử đi được
  trả về các successors

Q6: 